/* standard.css */
{%
Dim fontSize =CurrentADC.PropValue("fontSize")

Dim popupColourPrimary =CurrentADC.PropValue("popupColourPrimary")
Dim popupColourSecondary =CurrentADC.PropValue("popupColourSecondary")
Dim fontColour =CurrentADC.PropValue("fontColour")
Dim popupShadow =CurrentADC.PropValue("popupShadow")
Dim popupBorderColour =CurrentADC.PropValue("popupBorderColour")
Dim popupBorderThickness =CurrentADC.PropValue("popupBorderThickness")
Dim popupBorderStyle =CurrentADC.PropValue("popupBorderStyle")
Dim popupBorderRadius =CurrentADC.PropValue("popupBorderRadius")
Dim buttonBgColour =CurrentADC.PropValue("buttonBgColour")
Dim buttonBorderColour =CurrentADC.PropValue("buttonBorderColour")
Dim buttonBorderRadius =CurrentADC.PropValue("buttonBorderRadius")
Dim buttonBorderStyle =CurrentADC.PropValue("buttonBorderStyle")
Dim buttonBorderThickness =CurrentADC.PropValue("buttonBorderThickness")
Dim buttonIconColour =CurrentADC.PropValue("buttonIconColour")
Dim closeButtonHoverBgColour =CurrentADC.PropValue("closeButtonHoverBgColour")
Dim closeButtonHoverBorderColour =CurrentADC.PropValue("closeButtonHoverBorderColour")
Dim closeButtonHoverIconColour =CurrentADC.PropValue("closeButtonHoverIconColour")
Dim confirmButtonHoverBgColour =CurrentADC.PropValue("confirmButtonHoverBgColour")
Dim confirmButtonHoverBorderColour =CurrentADC.PropValue("confirmButtonHoverBorderColour")
Dim confirmButtonHoverIconColour =CurrentADC.PropValue("confirmButtonHoverIconColour")
Dim deleteButtonHoverBgColour =CurrentADC.PropValue("deleteButtonHoverBgColour")
Dim deleteButtonHoverBorderColour =CurrentADC.PropValue("deleteButtonHoverBorderColour")
Dim deleteButtonHoverIconColour =CurrentADC.PropValue("deleteButtonHoverIconColour")

Dim counterPosition =CurrentADC.PropValue("counterPosition")
Dim counterBorderColour =CurrentADC.PropValue("counterBorderColour")
Dim counterBorderRadius =CurrentADC.PropValue("counterBorderRadius")
Dim counterBorderWidth =CurrentADC.PropValue("counterBorderWidth")
Dim counterPrimaryColour =CurrentADC.PropValue("counterPrimaryColour")
Dim counterSecondaryColour =CurrentADC.PropValue("counterSecondaryColour")
Dim counterFontColour =CurrentADC.PropValue("counterFontColour")
Dim counterDropShadow =CurrentADC.PropValue("counterDropShadow")
Dim counterAlign =CurrentADC.PropValue("counterAlign")

Dim commentBoxBorderColour =CurrentADC.PropValue("commentBoxBorderColour")
Dim commentBoxBorderStyle =CurrentADC.PropValue("commentBoxBorderStyle")
Dim commentBoxBorderThickness =CurrentADC.PropValue("commentBoxBorderThickness")

Dim faceColour =CurrentADC.PropValue("faceColour")
Dim selectedFaceColour =CurrentADC.PropValue("selectedFaceColour")
Dim numberOfMoods =CurrentADC.PropValue("numberOfMoods")
Dim singleMoodState =CurrentADC.PropValue("singleMoodState")

Dim moodButtonBorderStyle =CurrentADC.PropValue("moodButtonBorderStyle")
Dim moodButtonBorderThickness =CurrentADC.PropValue("moodButtonBorderThickness")

Dim positiveBGColour =CurrentADC.PropValue("positiveBGColour")
Dim positiveBorderColour =CurrentADC.PropValue("positiveBorderColour")
Dim positiveHoverBGColour =CurrentADC.PropValue("positiveHoverBGColour")
Dim positiveHoverBorderColour =CurrentADC.PropValue("positiveHoverBorderColour")
Dim positiveSelectedBGColour =CurrentADC.PropValue("positiveSelectedBGColour")
Dim positiveSelectedBorderColour =CurrentADC.PropValue("positiveSelectedBorderColour")
Dim neutralBGColour =CurrentADC.PropValue("neutralBGColour")
Dim neutralBorderColour =CurrentADC.PropValue("neutralBorderColour")
Dim neutralHoverBGColour =CurrentADC.PropValue("neutralHoverBGColour")
Dim neutralHoverBorderColour =CurrentADC.PropValue("neutralHoverBorderColour")
Dim neutralSelectedBGColour =CurrentADC.PropValue("neutralSelectedBGColour")
Dim neutralSelectedBorderColour =CurrentADC.PropValue("neutralSelectedBorderColour")
Dim negativeBGColour =CurrentADC.PropValue("negativeBGColour")
Dim negativeBorderColour =CurrentADC.PropValue("negativeBorderColour")
Dim negativeHoverBGColour =CurrentADC.PropValue("negativeHoverBGColour")
Dim negativeHoverBorderColour =CurrentADC.PropValue("negativeHoverBorderColour")
Dim negativeSelectedBGColour =CurrentADC.PropValue("negativeSelectedBGColour")
Dim negativeSelectedBorderColour =CurrentADC.PropValue("negativeSelectedBorderColour")

%}

/* General */
#adc_{%= CurrentADC.InstanceId%} { 

}

/* General */
#adc_{%= CurrentADC.InstanceId%} .smartBoard { 
	display:block;
	position:relative;
}

#adc_{%= CurrentADC.InstanceId%} .smartNote { 

	box-sizing:border-box;
	
	{% IF popupBorderThickness = "none" Then %}
		border: none;
	{% Else %}
		border: {%= popupBorderThickness%} {%= popupBorderStyle%} rgb({%= popupBorderColour%});
	{% EndIF %}	
	
	background: rgb({%= popupColourPrimary%}); 
	background: -moz-linear-gradient(top,  rgb({%= popupColourPrimary%}) 0%, rgb({%= popupColourSecondary%}) 100%); /* FF3.6+ */
	background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,rgb({%= popupColourPrimary%})), color-stop(100%,rgb({%= popupColourSecondary%}))); /* Chrome,Safari4+ */
	background: -webkit-linear-gradient(top,  rgb({%= popupColourPrimary%}) 0%,rgb({%= popupColourSecondary%}) 100%); /* Chrome10+,Safari5.1+ */
	background: -o-linear-gradient(top,  rgb({%= popupColourPrimary%}) 0%,rgb({%= popupColourSecondary%}) 100%); /* Opera 11.10+ */
	background: -ms-linear-gradient(top,  rgb({%= popupColourPrimary%}) 0%,rgb({%= popupColourSecondary%}) 100%); /* IE10+ */
	background: linear-gradient(to bottom,  rgb({%= popupColourPrimary%}) 0%,rgb({%= popupColourSecondary%}) 100%); /* W3C */
	/*filter: progid:DXImageTransform.Microsoft.gradient( startColorstr={%= popupColourPrimary.ToHexa()%}, endColorstr={%= popupColourSecondary.ToHexa()%},GradientType=0 );*/ /* IE6-8 */
	
	-webkit-border-radius:	{%= popupBorderRadius%}; 
	-moz-border-radius:		{%= popupBorderRadius%}; 
	-khtml-border-radius:	{%= popupBorderRadius%}; 
	border-radius:			{%= popupBorderRadius%};
	
	-webkit-box-shadow: {%= popupShadow%};
	-moz-box-shadow: {%= popupShadow%};
	box-shadow: {%= popupShadow%};
	
}

#adc_{%= CurrentADC.InstanceId%} .smartNote p { 
	font-size:{%= fontSize%};
	color:rgb({%= fontColour%});
}

#adc_{%= CurrentADC.InstanceId%} .smartNote textarea { 
	box-sizing:border-box;
    {% IF commentBoxBorderThickness = "none" Then %}
		border: none;
	{% Else %}
    	border: {%= commentBoxBorderThickness%} {%= commentBoxBorderStyle%} rgb({%= commentBoxBorderColour%});
	{% EndIF %}	
}

#adc_{%= CurrentADC.InstanceId%} .smartNote .closeNote, 
#adc_{%= CurrentADC.InstanceId%} .smartNote .confirmNote, 
#adc_{%= CurrentADC.InstanceId%} .smartNote .deleteNote {
	-webkit-border-radius:{%= buttonBorderRadius%};
	-moz-border-radius:{%= buttonBorderRadius%};
    border-radius:{%= buttonBorderRadius%};
	background-color:rgb({%= buttonBgColour%}); 
    
    {% IF popupBorderThickness = "none" Then %}
		border: none;
	{% Else %}
    	border: {%= buttonBorderThickness%} {%= buttonBorderStyle%} rgb({%= buttonBorderColour%});
	{% EndIF %}	
    
}
#adc_{%= CurrentADC.InstanceId%} .smartNote .closeNote:hover {
    background-color:rgb({%= closeButtonHoverBgColour%}); border-color:rgb({%= closeButtonHoverBorderColour%});
}
#adc_{%= CurrentADC.InstanceId%} .smartNote .deleteNote:hover {
    background-color:rgb({%= deleteButtonHoverBgColour%}); border-color:rgb({%= deleteButtonHoverBorderColour%});
}
#adc_{%= CurrentADC.InstanceId%} .smartNote .confirmNote:hover {
    background-color:rgb({%= confirmButtonHoverBgColour%}); border-color:rgb({%= confirmButtonHoverBorderColour%});
}

#adc_{%= CurrentADC.InstanceId%} .smartNote .goodVibe, #adc_{%= CurrentADC.InstanceId%} .smartNote .neutralVibe, #adc_{%= CurrentADC.InstanceId%} .smartNote .badVibe { 
	{% IF numberOfMoods = "1" Then %}
         display:none;
    {% EndIF %}	
}
#adc_{%= CurrentADC.InstanceId%} .smartNote .goodVibe i,
#adc_{%= CurrentADC.InstanceId%} .smartNote .neutralVibe i,
#adc_{%= CurrentADC.InstanceId%} .smartNote .badVibe i { 
    color:rgb({%= faceColour%});
    font-size:13px; line-height:32px; font-weight:normal; width:28px;
}

#adc_{%= CurrentADC.InstanceId%} .smartNote .goodVibe.active i,
#adc_{%= CurrentADC.InstanceId%} .smartNote .neutralVibe.active i,
#adc_{%= CurrentADC.InstanceId%} .smartNote .badVibe.active i,
#adc_{%= CurrentADC.InstanceId%} .smartNote .goodVibe:hover i,
#adc_{%= CurrentADC.InstanceId%} .smartNote .neutralVibe:hover i,
#adc_{%= CurrentADC.InstanceId%} .smartNote .badVibe:hover i{ 
    color:rgb({%= selectedFaceColour%});
}
#adc_{%= CurrentADC.InstanceId%} .smartNote .closeNote i,
#adc_{%= CurrentADC.InstanceId%} .smartNote .confirmNote i,
#adc_{%= CurrentADC.InstanceId%} .smartNote .deleteNote i { 
    color:rgb({%= buttonIconColour%});
    font-size:20px; line-height:30px; font-weight:normal; width:22px;
}
#adc_{%= CurrentADC.InstanceId%} .smartNote .confirmNote:hover i{ 
    color:rgb({%= confirmButtonHoverIconColour%});
}
#adc_{%= CurrentADC.InstanceId%} .smartNote .deleteNote:hover i{ 
    color:rgb({%= deleteButtonHoverIconColour%});
}
#adc_{%= CurrentADC.InstanceId%} .smartNote .closeNote:hover i{ 
    color:rgb({%= closeButtonHoverIconColour%});
}

#adc_{%= CurrentADC.InstanceId%} .smartNote .goodVibe, #adc_{%= CurrentADC.InstanceId%} .smartNote .neutralVibe, #adc_{%= CurrentADC.InstanceId%} .smartNote .badVibe { 
	-webkit-border-radius:{%= buttonBorderRadius%};
	-moz-border-radius:{%= buttonBorderRadius%};
	border-radius:{%= buttonBorderRadius%};
}
#adc_{%= CurrentADC.InstanceId%} .smartNote .goodVibe {
    background-color:rgb({%= positiveBGColour%});
    {% IF moodButtonBorderThickness = "none" Then %}
		border: none;
	{% Else %}
    	border: {%= moodButtonBorderThickness%} {%= moodButtonBorderStyle%} rgb({%= positiveBorderColour%});
	{% EndIF %}	
}
#adc_{%= CurrentADC.InstanceId%} .smartNote .neutralVibe { 
    background-color:rgb({%= neutralBGColour%});
    {% IF moodButtonBorderThickness = "none" Then %}
		border: none;
	{% Else %}
    	border: {%= moodButtonBorderThickness%} {%= moodButtonBorderStyle%} rgb({%= neutralBorderColour%});
	{% EndIF %}	
}
#adc_{%= CurrentADC.InstanceId%} .smartNote .badVibe { 
    background-color:rgb({%= negativeBGColour%});
    {% IF moodButtonBorderThickness = "none" Then %}
		border: none;
	{% Else %}
    	border: {%= moodButtonBorderThickness%} {%= moodButtonBorderStyle%} rgb({%= negativeBorderColour%});
	{% EndIF %}	
    
    {% IF numberOfMoods = "2" Then %}
         top:46px; left:5px;
    {% EndIF %}	
}
#adc_{%= CurrentADC.InstanceId%} .smartNote .goodVibe:hover { 
    background-color:rgb({%= positiveHoverBGColour%});
    border-color:rgb({%= positiveHoverBorderColour%});
}
#adc_{%= CurrentADC.InstanceId%} .smartNote .neutralVibe:hover {
    color:rgb({%= selectedFaceColour%});
    background-color:rgb({%= neutralHoverBGColour%});
    border-color:rgb({%= neutralHoverBorderColour%});
}
#adc_{%= CurrentADC.InstanceId%} .smartNote .badVibe:hover { 
    background-color:rgb({%= negativeHoverBGColour%});
    border-color:rgb({%= negativeHoverBorderColour%});
}
#adc_{%= CurrentADC.InstanceId%} .smartNote .goodVibe.active { 
    background-color:rgb({%= positiveSelectedBGColour%});
    border-color:rgb({%= positiveSelectedBorderColour%});
}
#adc_{%= CurrentADC.InstanceId%} .smartNote .neutralVibe.active {
    background-color:rgb({%= neutralSelectedBGColour%});
    border-color:rgb({%= neutralSelectedBorderColour%});
}
#adc_{%= CurrentADC.InstanceId%} .smartNote .badVibe.active { 
    background-color:rgb({%= negativeSelectedBGColour%});
    border-color:rgb({%= negativeSelectedBorderColour%});
}


/* Counter */
#adc_{%= CurrentADC.InstanceId%} .counterContainer { 
	text-align:{%= counterAlign%}; 
	position:absolute;
	{% IF CurrentADC.PropValue("counterPosition") = "top left" Then %}
		top:0px; left:0px;
	{% ElseIf CurrentADC.PropValue("counterPosition") = "top right" Then %}
		top:0px; right:0px;
	{% ElseIf CurrentADC.PropValue("counterPosition") = "bottom left" Then %}
		bottom:0px; left:0px;
	{% ElseIf CurrentADC.PropValue("counterPosition") = "bottom right" Then %}
		bottom:0px; right:0px;
	{% EndIF %}	
}
#adc_{%= CurrentADC.InstanceId%} .counter { 
	{% IF CurrentADC.PropValue("counterBorderWidth") = "none" Then %}
		border: none;
	{% Else %}
		border: {%= counterBorderWidth%} solid rgb({%= counterBorderColour%});
	{% EndIF %}	
	background: rgb({%= counterPrimaryColour%}); 
	background: -moz-linear-gradient(top,  rgb({%= counterPrimaryColour%}) 0%, rgb({%= counterSecondaryColour%}) 100%); /* FF3.6+ */
	background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,rgb({%= counterPrimaryColour%})), color-stop(100%,rgb({%= counterSecondaryColour%}))); /* Chrome,Safari4+ */
	background: -webkit-linear-gradient(top,  rgb({%= counterPrimaryColour%}) 0%,rgb({%= counterSecondaryColour%}) 100%); /* Chrome10+,Safari5.1+ */
	background: -o-linear-gradient(top,  rgb({%= counterPrimaryColour%}) 0%,rgb({%= counterSecondaryColour%}) 100%); /* Opera 11.10+ */
	background: -ms-linear-gradient(top,  rgb({%= counterPrimaryColour%}) 0%,rgb({%= counterSecondaryColour%}) 100%); /* IE10+ */
	background: linear-gradient(to bottom,  rgb({%= counterPrimaryColour%}) 0%,rgb({%= counterSecondaryColour%}) 100%); /* W3C */
	filter: progid:DXImageTransform.Microsoft.gradient( startColorstr={%= counterPrimaryColour.ToHexa()%}, endColorstr={%= counterSecondaryColour.ToHexa()%},GradientType=0 ); /* IE6-8 */
	
	display:inline-block; 
	border-radius:{%= counterBorderRadius%}; 
	margin:5px; 
	width:30px; 
	height:30px;
	
	-webkit-box-shadow: {%= counterDropShadow%};
	-moz-box-shadow: {%= counterDropShadow%};
	box-shadow: {%= counterDropShadow%};
}
#adc_{%= CurrentADC.InstanceId%} .counterNumber { padding:25%; text-align:center; margin:0px auto; color:rgb({%= counterFontColour%}); }